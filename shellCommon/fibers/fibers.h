#pragma once

namespace fibers {

//================================================================
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
//----------------------------------------------------------------
//
// WIN32
//
//----------------------------------------------------------------
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
//================================================================

#if defined(_WIN32)

//================================================================
//
// Fiber
//
//================================================================

struct Fiber
{
    void* handle = nullptr;
};

//================================================================
//
// fiberIsCreated
//
//================================================================

inline bool fiberIsCreated(const Fiber& fiber)
{
    return fiber.handle != nullptr;
}

//================================================================
//
// FiberFunc
//
//================================================================

#define FIBER_CONVENTION __stdcall
typedef void FIBER_CONVENTION FiberFunc(void* param);

//================================================================
//
// fiberConvertThreadToFiber
// fiberConvertFiberToThread
//
//================================================================

bool fiberConvertThreadToFiber(Fiber& fiber);
bool fiberConvertFiberToThread();

//================================================================
//
// fiberCreate
// fiberDestroy
//
//================================================================

bool fiberCreate(FiberFunc* func, void* param, size_t stackSize, Fiber& fiber);
void fiberDestroy(Fiber& fiber);

//================================================================
//
// fiberSwitch
//
//================================================================

void fiberSwitch(Fiber& oldFiber, const Fiber& newFiber);

//----------------------------------------------------------------

#endif

//----------------------------------------------------------------

}
